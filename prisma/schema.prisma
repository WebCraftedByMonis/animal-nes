// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model City {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  charges   DeliveryCharge[]
  createdAt DateTime         @default(now())
}

model DeliveryCharge {
  id        Int      @id @default(autoincrement())
  amount    Float
  cityId    Int
  notes     String?  @db.Text
  city      City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Product {
  id             Int             @id @default(autoincrement())
  productName    String          @db.Text
  genericName    String?         @db.Text
  category       String?        @db.Text
  subCategory    String?         @db.Text
  subsubCategory String?       @db.Text
  productType    String?       @db.Text
  company        Company?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      Int
  partner        Partner?      @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId      Int
  description    String?         @db.Text
  productLink    String?
  dosage         String?         @db.Text
  image          ProductImage?
  pdf            ProductPdf?
  outofstock     Boolean         @default(false)
  isFeatured     Boolean         @default(false)
  isActive       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  variants       ProductVariant[]
  cartItems      CartItem[]
  checkoutItems  CheckoutItem[]
}

model ProductVariant {
  id             Int             @id @default(autoincrement())
  packingVolume  String   ?       @db.Text
  companyPrice   Float?
  dealerPrice    Float?
  customerPrice  Float?
  inventory      Int?
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      Int
  cartItems      CartItem[]
  checkoutItems  CheckoutItem[]
}

model ProductPdf {
  id        Int      @id @default(autoincrement())
  url       String   @db.Text
  publicId  String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String   @db.Text
  alt       String
  publicId  String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id          Int           @id @default(autoincrement())
  companyName String?        @unique
  mobileNumber String?      @unique
  products    Product[]
  address     String?      @db.Text 
  email       String?       @unique
  image       CompanyImage?
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime?      @updatedAt
}

model CompanyImage {
  id        Int      @id @default(autoincrement())
  url       String?   @db.Text
  alt       String?   @unique
  publicId  String?  @unique
  company   Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int?      @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SendToPartner {
  YES
  NO
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model PartnerImage {
  id        Int      @id @default(autoincrement())
  url       String?   @db.Text
  alt       String?
  publicId  String?
  partner   Partner? @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StartTime {
  id        Int      @id @default(autoincrement())
  name      String
  startTime DateTime @db.Time
  endTime   DateTime @db.Time
  partners  Partner[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Partner {
  id                  Int                   @id @default(autoincrement())
  partnerName         String                @db.Text
  gender              Gender?
  partnerEmail        String?               @unique
  shopName            String?               @db.Text
  partnerMobileNumber String?
  cityName            String?
  fullAddress         String?               @db.Text
  rvmpNumber          String?
  sendToPartner       SendToPartner?
  qualificationDegree String?
  zipcode             String?
  state               String?
  areaTown            String?               @db.Text
  password            String?
  bloodGroup          BloodGroup?
  availableDaysOfWeek PartnerAvailableDay[]
  partnerImage        PartnerImage?
  startTime           StartTime[]
  specialization      String?               @db.Text
  species             String?
  partnerType         String?
  products            Product[]
  createdAt           DateTime?              @default(now())
  updatedAt           DateTime?              @updatedAt
}

model PartnerAvailableDay {
  id        Int     @id @default(autoincrement())
  day       DayOfWeek
  partner   Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId Int
  @@unique([day, partnerId])
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?              @unique
  emailVerified DateTime?
  image         String?
  PhoneNumber   String?
  accounts      Account[]
  sessions      Session[]
  cart          CartItem[]
  checkouts     Checkout[]
  appointments  AppointmentRequest[]
  sellAnimals   SellAnimal[]
  animalCart    AnimalCart[]
  jobApplicants JobApplicant[]
  testimonials  Testimonial[]
  createdAt DateTime? @default(now())

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model CartItem {
  id        Int            @id @default(autoincrement())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  variantId Int
  quantity  Int            @default(1)
  createdAt DateTime       @default(now())
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  @@unique([userId, productId, variantId])
}

model Checkout {
  id               Int             @id @default(autoincrement())
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  city             String
  province         String
  shipmentcharges  String?         @db.Text
  address          String          @db.Text
  shippingAddress  String          @db.Text
  paymentMethod    String          @db.Text
  total            Float
  status           String
  createdAt        DateTime        @default(now())
  items            CheckoutItem[]  @relation("CheckoutToItems")
}

model CheckoutItem {
  id          Int             @id @default(autoincrement())
  checkout    Checkout        @relation(name: "CheckoutToItems", fields: [checkoutId], references: [id], onDelete: Cascade)
  checkoutId  Int
  product     Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int?
  variantId   Int?
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  animalId    Int?
  animal      SellAnimal?     @relation(fields: [animalId], references: [id], onDelete: Cascade)
  quantity    Int
  price       Float
}

model AppointmentRequest {
  id            Int               @id @default(autoincrement())
  customerId    String
  customer      User              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  doctor        String
  city          String
  state         String?
  species       String
  fullAddress   String?           @db.Text
  gender        Gender
  appointmentAt DateTime
  isEmergency   Boolean
  description   String            @db.Text
  createdAt     DateTime          @default(now())
  status        AppointmentStatus @default(PENDING)
}

model AnimalNews {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  description String     @db.Text
  image       newsImage? @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId     Int?
  pdf         newsPdf?   @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  pdfId       Int?
  isActive    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model newsImage {
  id        Int          @id @default(autoincrement())
  publicId  String
  url       String       @db.Text
  alt       String?
  newsPosts AnimalNews[]
}

model newsPdf {
  id        Int          @id @default(autoincrement())
  publicId  String
  url       String       @db.Text
  title     String?
  newsPosts AnimalNews[]
}

model SellAnimal {
  id              Int               @id @default(autoincrement())
  specie          String
  breed           String
  quantity        Int?
  ageType         AgeType
  ageNumber       Int
  location        String
  weightType      WeightType
  weightValue     Float
  gender          Gender
  healthCertificate Boolean
  totalPrice      Float
  purchasePrice   Float
  referredBy      String?           @db.Text
  status          SellStatus        @default(PENDING)
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  images          SellAnimalImage[]
  videos          SellAnimalVideo[]
  animalCart      AnimalCart[]
  checkout        CheckoutItem[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model SellAnimalImage {
  id           Int        @id @default(autoincrement())
  url          String     @db.Text
  publicId     String
  alt          String
  sellAnimalId Int
  sellAnimal   SellAnimal @relation(fields: [sellAnimalId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model SellAnimalVideo {
  id           Int        @id @default(autoincrement())
  url          String     @db.Text
  publicId     String
  alt          String
  sellAnimalId Int
  sellAnimal   SellAnimal @relation(fields: [sellAnimalId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model AnimalCart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  animal    SellAnimal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  animalId  Int
  quantity  Int        @default(1)
}

model JobApplicant {
  id                Int             @id @default(autoincrement())
  name              String
  gender            Gender
  mobileNumber      String          @unique
  address           String          @db.Text
  qualification     String?         @db.Text
  dateOfBirth       DateTime?
  expectedPosition  String?         @db.Text
  expectedSalary    String?
  preferredIndustry String?         @db.Text
  preferredLocation String?         @db.Text
  highestDegree     String?         @db.Text
  degreeInstitution String?         @db.Text
  majorFieldOfStudy String?         @db.Text
  workExperience    String?         @db.Text
  previousCompany   String?         @db.Text
  declaration       DeclarationStatus
  imageId           Int?            @unique
  image             ApplicantImage? @relation(fields: [imageId], references: [id], onDelete: Cascade)
  cvId              Int?            @unique
  cv                ApplicantCV?    @relation(fields: [cvId], references: [id], onDelete: Cascade)
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model ApplicantImage {
  id        Int           @id @default(autoincrement())
  url       String        @db.Text
  publicId  String
  alt       String
  applicant JobApplicant?
}

model ApplicantCV {
  id        Int           @id @default(autoincrement())
  url       String        @db.Text
  publicId  String
  alt       String
  applicant JobApplicant?
}

model JobForm {
  id             Int          @id @default(autoincrement())
  name           String       @db.Text
  company        String       @db.Text
  mobileNumber   String
  email          String?
  position       String       @db.Text
  eligibility    String       @db.Text
  benefits       String       @db.Text
  location       String       @db.Text
  companyAddress String       @db.Text
  howToApply     String       @db.Text
 jobFormImage   JobFormImage? @relation(fields: [jobFormImageId], references: [id], onDelete: Cascade)
jobFormImageId Int?

  noofpositions  String       @db.Text
  deadline       String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model JobFormImage {
  id        Int       @id @default(autoincrement())
  url       String    @db.Text
  alt       String
  publicId  String
  jobForms  JobForm[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model monis {
  id       Int    @id @default(autoincrement())
  monisname String
}

model Banner {
  id        Int          @id @default(autoincrement())
  position  Int          @unique
  image     BannerImage?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model BannerImage {
  id        Int      @id @default(autoincrement())
  url       String   @db.Text
  alt       String   @unique
  publicId  String?  @unique
  banner    Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  bannerId  Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  isApproved Boolean  @default(false)
  isActive   Boolean  @default(true)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TraditionalJobPost {
  id          Int                     @id @default(autoincrement())
  title       String                  @db.Text
  description String                  @db.Text
  image       TraditionalJobPostImage?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
}

model TraditionalJobPostImage {
  id        Int                  @id @default(autoincrement())
  url       String               @db.Text
  alt       String              
  publicId  String?              @unique
  jobPost   TraditionalJobPost   @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  jobPostId Int                  @unique
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

enum AppointmentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SellStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum AgeType {
  DAYS
  WEEKS
  MONTHS
  YEARS
}

enum WeightType {
  TONS
  MUNS
  KGS
  GRAMS
}

enum DeclarationStatus {
  AGREED
  NOT_AGREED
}

model HistoryForm {
  id                    Int                @id @default(autoincrement())
  
  // Owner/Contact Information
  name                  String             @db.Text
  contact               String             @db.Text
  address               String             @db.Text
  
  // Animal Information
  animalSpecie          String             @db.Text
  breed                 String             @db.Text
  age                   String             @db.Text
  sex                   String             @db.Text
  tag                   String?            @db.Text
  use                   String?            @db.Text
  
  // Medical History
  mainIssue             String             @db.Text
  duration              String             @db.Text
  pastIllness           String?            @db.Text
  pastTreatment         String?            @db.Text
  allergies             String?            @db.Text
  surgeries             String?            @db.Text
  
  // Reproductive Information
  reproductiveStatus    String?            @db.Text
  lastEvent             String?            @db.Text
  
  // Management Information
  diet                  String?            @db.Text
  water                 String?            @db.Text
  housing               String?            @db.Text
  
  // Production Data
  milkPerDay            String?            @db.Text
  eggPerDay             String?            @db.Text
  weightGain            String?            @db.Text
  
  // Vaccination/Deworming
  vaccinationDeworming  Boolean?           @default(false)
  lastGiven             String?            @db.Text
  nextDue               String?            @db.Text
  
  // Exposure History
  newAnimalContact      Boolean?           @default(false)
  transport             Boolean?           @default(false)
  outbreakNearby        Boolean?           @default(false)
  wildlife              Boolean?           @default(false)
  parasites             Boolean?           @default(false)
  
  // Examination Details
  examinedBy            String?            @db.Text
  examinationDate       DateTime?
  referalNo             String?            @db.Text
  
  // Relation
  prescriptionForm      PrescriptionForm?
  
  // Timestamps
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}

model PrescriptionForm {
  id                    Int                @id @default(autoincrement())
  prescriptionNo        String?               
  
  // Doctor/Vet Information
  doctorName            String             @db.Text
  qualification         String?            @db.Text
  clinicName            String?            @db.Text
  clinicAddress         String?            @db.Text
  clinicPhone           String?            @db.Text
  clinicEmail           String?            @db.Text
  
  // Owner Information
  ownerName             String             @db.Text
  ownerContact          String             @db.Text
  
  // Animal Information
  animalSpecies         String             @db.Text
  breed                 String?            @db.Text
  age                   String?            @db.Text
  sex                   String?            @db.Text
  
  // Clinical Information
  clinicalDiagnosis     String?            @db.Text
  labDiagnosis          String?            @db.Text
  
  // Instructions
  continuePrevMedicine  Boolean            @default(false)
  followUpDate          DateTime?
  monitorSideEffects    Boolean            @default(false)
  maintainHygiene       Boolean            @default(false)
  
  // Prescription Items
  prescriptionItems     PrescriptionItem[]
  
  // Relation
  historyForm           HistoryForm        @relation(fields: [historyFormId], references: [id], onDelete: Cascade)
  historyFormId         Int                @unique
  
  // Timestamps
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}

model PrescriptionItem {
  id                    Int                @id @default(autoincrement())
  
  // Medicine Details
  medicineName          String             @db.Text
  strength              String?            @db.Text
  dosage                String             @db.Text
  duration              String             @db.Text
  notes                 String?            @db.Text
  
  // Relations
  prescription          PrescriptionForm   @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  prescriptionId        Int
  
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}
model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String   // This will be hashed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sessions AdminSession[]
}
model AdminSession {
  id        String   @id @default(cuid())
  token     String   @unique  // This works perfectly!
  adminId   String
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}