// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}




model City {
  id      Int              @id @default(autoincrement())
  name    String           @unique
  charges DeliveryCharge[]
  createdAt DateTime       @default(now())
}

model DeliveryCharge {
  id      Int      @id @default(autoincrement())
  amount  Float
  cityId  Int
  city    City     @relation(fields: [cityId], references: [id])
  createdAt DateTime @default(now())
}





model Product {
  id             Int            @id @default(autoincrement())
  productName    String    @db.Text
  genericName    String?     @db.Text
  category       String    @db.Text
  subCategory    String    @db.Text
  subsubCategory String   @db.Text
  productType    String    @db.Text
  company        Company        @relation(fields: [companyId], references: [id])
  companyId      Int
  companyPrice   Float?
  dealerPrice    Float?
  customerPrice  Float
  packingUnit    String  @db.Text
  partner        Partner        @relation(fields: [partnerId], references: [id])
  partnerId      Int
  description    String?   
  productLink    String?
  inventory      Int 
  dosage         String?   @db.Text
  image          ProductImage?  // Changed to direct relation
  pdf            ProductPdf?    // Changed to direct relation
  outofstock     Boolean        @default(false)
  isFeatured     Boolean        @default(false)
  isActive       Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
   cartItems   CartItem[]
   checkoutItems  CheckoutItem[] 
}

model ProductPdf {
  id        Int      @id @default(autoincrement())
  url       String
  publicId  String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?     @unique  // Made optional
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String
  publicId  String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id          Int           @id @default(autoincrement())
  companyName String @unique
  mobileNumber String?  @unique
  products    Product[]
  address     String?  @unique 
  email       String? @unique
  image       CompanyImage? 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
} 

model CompanyImage {
  id        Int      @id @default(autoincrement())
  url       String  @unique
  alt       String  @unique
  publicId  String?  @unique
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SendToPartner {
  YES
  NO
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}


model PartnerImage {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String?
  publicId  String?
 partner   Partner? @relation(fields: [partnerId], references: [id])
  partnerId Int?     @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StartTime {
  id        Int      @id @default(autoincrement())
  name      String
  startTime DateTime @db.Time
  endTime   DateTime @db.Time
  partners  Partner[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Partner {
  id                Int             @id @default(autoincrement())
  partnerName       String @db.Text
  gender            Gender?
  partnerEmail      String?
  shopName          String? @db.Text
  partnerMobileNumber String?
  cityName          String?
  fullAddress       String? @db.Text
  rvmpNumber        String?
  sendToPartner     SendToPartner?
  qualificationDegree String?
  zipcode           String?
  state             String?
  areaTown          String? @db.Text
  password          String? // Consider security best practices for storing passwords
  bloodGroup        BloodGroup?
    availableDaysOfWeek  PartnerAvailableDay[]
   partnerImage     PartnerImage?   
  
  startTime         StartTime[]
  
  specialization    String? @db.Text
  
  species           String?
  
  partnerType        String?
  products          Product[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model PartnerAvailableDay {
  id         Int        @id @default(autoincrement())
  day        DayOfWeek
  partner    Partner    @relation(fields: [partnerId], references: [id])
  partnerId  Int

  @@unique([day, partnerId]) // prevent duplicate days for the same partner
}




model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cart      CartItem[]
  checkouts      Checkout[] 
   appointments  AppointmentRequest[]
   sellAnimals       SellAnimal[] 
   animalCart  AnimalCart[] 
     jobApplicants  JobApplicant[]  
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
   createdAt    DateTime @default(now()) 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // Prevent duplicates
}
model Checkout {
   id        Int      @id @default(autoincrement())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  city            String
  province        String
  address         String
  shippingAddress String
  paymentMethod   String
  total           Float
  status          String
  createdAt       DateTime       @default(now())

  items           CheckoutItem[] @relation("CheckoutToItems") // ✅ Relation name
}

model CheckoutItem {
   id        Int      @id @default(autoincrement())
  checkout    Checkout  @relation(name: "CheckoutToItems", fields: [checkoutId], references: [id]) // ✅ Match name here
  checkoutId  Int
  product     Product?   @relation(fields: [productId], references: [id])
  productId   Int?
    animalId    Int?
  animal      SellAnimal?  @relation(fields: [animalId], references: [id])

  quantity    Int
  price       Float
}


enum AppointmentStatus {
  PENDING
  APPROVED
  REJECTED
}

model AppointmentRequest {
  id             Int               @id @default(autoincrement())
  customerId     String
  customer       User              @relation(fields: [customerId], references: [id])
  doctor         String
  city           String
  state          String?
  species        String
  fullAddress    String? @db.Text
  gender         Gender
  appointmentAt  DateTime
  isEmergency    Boolean
  description    String @db.Text
  createdAt      DateTime          @default(now())
  status         AppointmentStatus @default(PENDING)
}


model AnimalNews {
  id          Int        @id @default(autoincrement())
  title       String
  description String @db.Text
  image       newsImage? @relation(fields: [imageId], references: [id])
  imageId     Int?        
  pdf         newsPdf?   @relation(fields: [pdfId], references: [id])
  pdfId       Int?  
  isActive    Boolean  @default(false)      
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model newsImage {
  id        Int         @id @default(autoincrement())
  publicId  String
  url       String
  alt       String?
  newsPosts AnimalNews[]
}

model newsPdf {
  id        Int         @id @default(autoincrement())
  publicId  String
  url       String
  title     String?
  newsPosts AnimalNews[]
}

model SellAnimal {
    id                  Int                 @id @default(autoincrement())
  
  specie              String
  breed               String
  quantity            Int?                // Optional
  ageType             AgeType             // Enum
  ageNumber           Int
  location            String              // City
  weightType          WeightType          // Enum
  weightValue         Float
  gender              Gender              // Enum

  healthCertificate   Boolean
  totalPrice          Float
  purchasePrice       Float
  referredBy          String? @db.Text
  status              SellStatus          @default(PENDING) // NEW FIELD

  userId              String
  user                User                @relation(fields: [userId], references: [id])

  images              SellAnimalImage[]   // Relation
  videos              SellAnimalVideo[]   // Relation
    animalCart      AnimalCart[] 
     checkout        CheckoutItem[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

enum SellStatus {
  PENDING
  ACCEPTED
  REJECTED
}
enum AgeType {
  DAYS
  WEEKS
  MONTHS
  YEARS
}

enum WeightType {
  TONS
  MUNS
  KGS
  GRAMS
}

model SellAnimalImage {
    id            Int     @id @default(autoincrement())
  url           String
  publicId      String
  alt           String

  sellAnimalId  Int
  sellAnimal    SellAnimal @relation(fields: [sellAnimalId], references: [id])

  createdAt     DateTime   @default(now())
}
model SellAnimalVideo {
    id            Int     @id @default(autoincrement())
  url           String
  publicId      String
  alt           String

  sellAnimalId  Int
  sellAnimal    SellAnimal @relation(fields: [sellAnimalId], references: [id])

  createdAt     DateTime   @default(now())
}

model AnimalCart {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
   userId    String
 animal    SellAnimal  @relation(fields: [animalId], references: [id])

  animalId  Int
  quantity  Int     @default(1)
}


enum DeclarationStatus {
  AGREED
  NOT_AGREED
}
model JobApplicant {
  id                    Int                 @id @default(autoincrement())
  name                  String
  gender                Gender
  mobileNumber          String
  address               String
  qualification         String?             
  dateOfBirth           DateTime?           
  expectedPosition      String?             
  expectedSalary        String?             
  preferredIndustry     String?             
  preferredLocation     String?             
  highestDegree         String?             
  degreeInstitution     String?             
  majorFieldOfStudy     String?             
  workExperience        String?             
  previousCompany       String?             
  declaration           DeclarationStatus

  // ✅ Fix: Add @unique
  imageId               Int?                @unique
  image                 ApplicantImage?     @relation(fields: [imageId], references: [id])

  cvId                  Int?                @unique
  cv                    ApplicantCV?        @relation(fields: [cvId], references: [id])

  userId                String
  user                  User                @relation(fields: [userId], references: [id])

  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model ApplicantImage {
  id          Int           @id @default(autoincrement())
  url         String
  publicId    String
  alt         String
  applicant   JobApplicant?
}

model ApplicantCV {
  id          Int           @id @default(autoincrement())
  url         String
  publicId    String
  alt         String
  applicant   JobApplicant?
}
model JobForm {
  id             Int          @id @default(autoincrement())
  name           String
  company        String
  mobileNumber   String
  email          String?

  position       String
  eligibility    String
  benefits       String
  location       String
  companyAddress String
  howToApply     String
  jobFormImage   JobFormImage? @relation(fields: [jobFormImageId], references: [id])
  jobFormImageId Int?
  noofpositions  String
  deadline       String

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model JobFormImage {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String
  publicId  String

  // Add this line to define the inverse relation
  jobForms  JobForm[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model monis {
  id Int @id @default(autoincrement())
  monisname String
}